<!--jacoco:检测代码覆盖率的插件，会生成index.xml文件在 target/site/jacoco目录下 index.html-->
  <plugin>
	<groupId>org.jacoco</groupId>
	<artifactId>jacoco-maven-plugin</artifactId>
	<version>0.7.8</version>
	<executions>
		<execution>
			<id>prepare-agent</id>
			<goals>
				<goal>prepare-agent</goal>
			</goals>
		</execution>
		<execution>
			<id>check</id>
			<goals>
				<goal>check</goal>
			</goals>
		</execution>
		<execution>
			<id>report</id>
			<phase>prepare-package</phase>
			<goals>
				<goal>report</goal>
			</goals>
		</execution>
	</executions>
	
	<!-- Configuration 里面写配置信息 -->
	<configuration>
	<!-- rules里面指定覆盖规则 -->
	<rules>
	  <rule implementation="org.jacoco.maven.RuleConfiguration">
		<element>BUNDLE</element>
		<limits>
		  <!-- 指定方法覆盖到80% -->
		  <limit implementation="org.jacoco.report.check.Limit">
			<counter>METHOD</counter>
			<value>COVEREDRATIO</value>
			<minimum>0.80</minimum>
		  </limit>
			<!-- 指定指令覆盖到80% -->
		  <limit implementation="org.jacoco.report.check.Limit">
			<counter>INSTRUCTION</counter>
			<value>COVEREDRATIO</value>
			<minimum>0.80</minimum>
		  </limit>
		   <!-- 指定行覆盖到80% -->
		  <limit implementation="org.jacoco.report.check.Limit">
			<counter>LINE</counter>
			<value>COVEREDRATIO</value>
			<minimum>0.80</minimum>
		  </limit>
		  <!-- 指定类覆盖到100%，不能遗失任何类 -->
		  <limit implementation="org.jacoco.report.check.Limit">
			<counter>CLASS</counter>
			<value>MISSEDCOUNT</value>
			<maximum>0</maximum>
		  </limit>
		  
		</limits>
	  </rule>
	</rules>
	</configuration>
</plugin>

<!-- findbugs插件 ：静态检查代码的错误,如果出现bug 可以使用mvn findbugs:gui命令查看详情-->
<plugin>
	<groupId>org.codehaus.mojo</groupId>
	<artifactId>findbugs-maven-plugin</artifactId>
	<version>3.0.4</version>
	<configuration>
		<!-- 设置分析工作的等级，可以为Min、Default和Max -->
		<effort>Low</effort>
		<!-- Low、Medium和High (Low最严格) -->
		<threshold>Medium</threshold>
		<failOnError>true</failOnError>
		<includeTests>true</includeTests>
		<!--findbugs需要忽略的错误的配置文件-->
	   <!--  <excludeFilterFile>compile.bat</excludeFilterFile> -->
	</configuration> 
	<executions>
		<execution>
			<id>run-findbugs</id>
			<!-- 在install 阶段触发执行findbugs检查，比如执行 mvn clean install-->
			<phase>install</phase>  
			<goals>
				<goal>check</goal>
			</goals>
		</execution>
	</executions>
</plugin>
  
<!-- 检测代码风格的插件 checkstyle（要在项目根目录下配置规则文件checkstyle.xml），
	然后使用mvn checkstyle:check命令验证，
	检查结果会在target目录下的checkstyle-result.html中查看-->
	<plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-checkstyle-plugin</artifactId>
       <version>3.0.0</version>
       <executions>
         <execution>
           <id>validate</id>
           <phase>validate</phase>
           <configuration>
             <encoding>UTF-8</encoding>
             <consoleOutput>true</consoleOutput>
             <failsOnError>true</failsOnError>
             <linkXRef>false</linkXRef>
           </configuration>
           <goals>
             <goal>check</goal>
           </goals>
         </execution>
       </executions>
     </plugin>
	<reporting>
		<plugins>
			<plugin>
			   <groupId>org.apache.maven.plugins</groupId>
			   <artifactId>maven-checkstyle-plugin</artifactId>
			   <version>3.0.0</version>
			</plugin>
		</plugins>
	</reporting>
	<properties>
		<checkstyle.config.location>checkstyle.xml</checkstyle.config.location>
	</properties>
  